name: 2. Release/Build/Deploy Staging
on:
  # pull_request:
  #   branches: [main]
  #   paths-ignore:
  #     - "**.md"
  #     - "docs/**"
  workflow_dispatch:

jobs:
  create-staging:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Get branch name
        id: get_branch_name
        shell: bash
        run: |
          echo "Version hex dump:"
          grep "version" version.toml | awk -F'"' '{print $2}' | xxd

          echo "📖 Reading version from version.toml..."
          version=$(grep "__version__" version.toml | awk -F'"' '{print $2}' | sed 's/^[[:space:]]*//;s/[[:space:]]*$//')
          echo "📌 Found version: '${version}'"

          branch_name="staging-${version}"
          echo "🔄 Creating branch name: ${branch_name}"

          echo "BRANCH_NAME=${branch_name}" >> $GITHUB_ENV
          echo "✅ Branch Name $branch_name created successfully"

      - name: Check if branch exists
        run: |
          echo "🔍 Debug: Full branch name to check: 'refs/heads/${BRANCH_NAME}'"
          # Store the ls-remote output in a variable
          branch_check=$(git ls-remote --heads origin "refs/heads/${BRANCH_NAME}")
          exit_code=$?

          echo "🔍 Debug: git ls-remote output: '${branch_check}'"
          echo "🔍 Debug: git ls-remote exit code: ${exit_code}"
          echo "🔍 Checking if branch ${{ env.BRANCH_NAME }} already exists..."

          if [ -n "${branch_check}" ]; then
            echo "❌ Branch ${{ env.BRANCH_NAME }} already exists!"
            echo "This likely means one of:"
            echo "  1. This version was already staged and potentially deployed"
            echo "  2. The version number in version.toml needs to be incremented"
            echo "  3. An old staging branch needs to be cleaned up"

            echo "::error::Branch ${{ env.BRANCH_NAME }} already exists!" >> $GITHUB_STEP_SUMMARY
            echo "This likely means one of:" >> $GITHUB_STEP_SUMMARY
            echo "  1. This version was already staged and potentially deployed" >> $GITHUB_STEP_SUMMARY
            echo "  2. The version number in version.toml needs to be incremented" >> $GITHUB_STEP_SUMMARY
            echo "  3. An old staging branch needs to be cleaned up" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi
          echo "✅ Branch does not exist, proceeding with creation"
      - name: Create staging branch
        run: |
          echo "🔄 Checking out main branch..."
          git checkout main

          echo "🌱 Creating new branch: ${{ env.BRANCH_NAME }}"
          git checkout -b ${{ env.BRANCH_NAME }}

          echo "⬆️ Pushing branch to origin..."
          git push origin ${{ env.BRANCH_NAME }}
          echo "✅ Branch successfully pushed to origin"

      - name: Post creation summary
        run: |
          echo "📝 Generating creation summary..."
          echo "✅ Branch ${{ env.BRANCH_NAME }} created successfully"
          echo "Created from: main"
          echo "Created by: ${{ github.actor }}"
          echo "Created at: $(date '+%Y-%m-%d %H:%M:%S')"

          echo "📝 Adding summary to job output..."
          echo "✅ Branch ${{ env.BRANCH_NAME }} created successfully" >> $GITHUB_STEP_SUMMARY
          echo "Created from: main" >> $GITHUB_STEP_SUMMARY
          echo "Created by: ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
          echo "Created at: $(date '+%Y-%m-%d %H:%M:%S')" >> $GITHUB_STEP_SUMMARY

  cleanup-old-branches:
    needs: create-staging
    runs-on: ubuntu-latest
    env:
      ROLLBACK_NUMBER: ${{ vars.VERSION_ROLLBACK_NUMBER }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Cleanup old staging branches
        run: |
          echo "🔍 Starting cleanup process..."
          echo "📊 Rollback number set to: $ROLLBACK_NUMBER"

          echo "📝 Getting list of staging branches..."
          staging_branches=$(git for-each-ref --sort=-creatordate --format '%(refname:short)' refs/remotes/origin | grep '^origin/staging-' | sed 's|origin/||')

          echo "📋 Converting branch list to array..."
          mapfile -t branch_array <<< "$staging_branches"

          # Print all found branches
          echo "📊 Found staging branches (sorted by date, newest first):"
          for branch in "${branch_array[@]}"; do
            echo "  - $branch"
          done

          # Calculate how many branches to keep
          keep_count=$ROLLBACK_NUMBER
          total_branches=${#branch_array[@]}

          echo "📈 Total branches found: $total_branches"
          echo "🎯 Branches to keep: $keep_count"

          # If we have more branches than we want to keep
          if [ $total_branches -gt $keep_count ]; then
            echo "🔄 Found $total_branches staging branches, keeping newest $keep_count"
            echo "📝 Branches to be kept:"
            for ((i=0; i<keep_count; i++)); do
              echo "  ✅ Keeping: ${branch_array[i]}"
            done

            echo " 🗑️ Branches to be deleted:"
            echo " 🗑️ Branches to be deleted:" >>  $GITHUB_STEP_SUMMARY
            # Loop through array starting after the ones we want to keep
            for ((i=keep_count; i<total_branches; i++)); do
              branch="${branch_array[i]}"
              echo "  ❌ Deleting: $branch"
              git push origin --delete "$branch"
              if [ $? -eq 0 ]; then
                echo "    ✅ Successfully deleted $branch"
                echo "    ✅ Successfully deleted $branch" >> $GITHUB_STEP_SUMMARY
              else
                echo "    ❌ Failed to delete $branch"
                echo "    ❌ Failed to delete $branch" >> $GITHUB_STEP_SUMMARY
              fi
            done
          else
            echo "✅ Only found $total_branches staging branches, no cleanup needed"
            echo "✅ Only found $total_branches staging branches, no cleanup needed" >> $GITHUB_STEP_SUMMARY
          fi

          echo "🎉 Cleanup process completed!"
          echo "🎉 Cleanup process completed!" >> $GITHUB_STEP_SUMMARY
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build_deploy_staging:
    needs: cleanup-old-branches
    runs-on: ubuntu-latest
    env:
      DJANGO_SETTINGS_MODULE: config.settings.staging
      VERSION: ""
      KUBE_NAMESPACE: tb-staging
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Extract version
        id: get_version
        run: |
          echo "📖 Reading version from version.toml..."
          version=$(grep "__version__" version.toml | awk -F'"' '{print $2}' | sed 's/^[[:space:]]*//;s/[[:space:]]*$//')
          echo "📌 Found version: '${version}'"
          echo "VERSION=${version}" >> $GITHUB_ENV
          echo "✅ Version extracted successfully"
          echo "📝 Build Process Started" >> $GITHUB_STEP_SUMMARY
          echo "Version extracted: ${version}" >> $GITHUB_STEP_SUMMARY

      - name: Set registry paths
        run: |
          echo "🔄 Setting up registry paths..."
          timestamp=$(date +%Y%m%d-%H%M%S)
          echo "DO_REGISTRY_LATEST=registry.digitalocean.com/trader-biz/staging:latest" >> $GITHUB_ENV
          echo "DO_REGISTRY_DATED=registry.digitalocean.com/trader-biz/staging:${timestamp}" >> $GITHUB_ENV
          echo "✅ Registry paths set:"
          echo "  Latest: $DO_REGISTRY_LATEST"
          echo "  Dated: $DO_REGISTRY_DATED"
          echo "✅ Registry paths set:" >> $GITHUB_STEP_SUMMARY
          echo "  Latest: $DO_REGISTRY_LATEST" >> $GITHUB_STEP_SUMMARY
          echo "  Dated: $DO_REGISTRY_DATED" >> $GITHUB_STEP_SUMMARY

      - name: Build image
        run: |
          echo "🏗️ Building Docker image with version ${VERSION}..."
          docker build -t $DO_REGISTRY_LATEST -t $DO_REGISTRY_DATED \
            --build-arg SETTINGS_MODULE=$DJANGO_SETTINGS_MODULE .
          echo "✅ Docker image built successfully with both tags"
          echo "✅ Build completed successfully" >> $GITHUB_STEP_SUMMARY
          echo "Settings Module: $DJANGO_SETTINGS_MODULE" >> $GITHUB_STEP_SUMMARY

      - name: Provide doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DO_REGISTRY_TOKEN }}

      - name: Login to Digital Ocean Registry
        run: |
          echo "🔐 Logging into Digital Ocean Registry..."
          doctl registry login --expiry-seconds 600
          echo "✅ Successfully logged into registry"
          echo "✅ Registry authentication successful" >> $GITHUB_STEP_SUMMARY

      - name: Push to Digital Ocean Registry
        run: |
          echo "⬆️ Pushing images to Digital Ocean Registry..."

          # Push latest tag
          echo "Pushing latest tag..."
          if push_output_latest=$(docker push $DO_REGISTRY_LATEST 2>&1); then
            echo "$push_output_latest"
            echo "✅ Successfully pushed latest tag"

            # Extract and display the digest
            digest_latest=$(echo "$push_output_latest" | grep "digest: sha256:" | tail -n1 | awk '{print $3}')
            if [ ! -z "$digest_latest" ]; then
              echo "📌 Latest tag digest: $digest_latest"
              echo "Latest tag digest: $digest_latest" >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "❌ Failed to push latest tag"
            echo "$push_output_latest"
            exit 1
          fi

          # Push dated tag
          echo "Pushing dated tag..."
          if push_output_dated=$(docker push $DO_REGISTRY_DATED 2>&1); then
            echo "$push_output_dated"
            echo "✅ Successfully pushed dated tag"

            # Extract and display the digest
            digest_dated=$(echo "$push_output_dated" | grep "digest: sha256:" | tail -n1 | awk '{print $3}')
            if [ ! -z "$digest_dated" ]; then
              echo "📌 Dated tag digest: $digest_dated"
              echo "Dated tag digest: $digest_dated" >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "❌ Failed to push dated tag"
            echo "$push_output_dated"
            exit 1
          fi

          # Verify the digests match
          if [ "$digest_latest" = "$digest_dated" ]; then
            echo "✅ Verified both tags point to the same image"
            echo "✅ Tags verified to point to same image" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Warning: Tag digests don't match!"
            echo "❌ Tag digest mismatch!" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi

      - name: Configure Kubernetes access
        run: |
          echo "🔑 Setting up Kubernetes cluster access..."
          doctl kubernetes cluster kubeconfig save --expiry-seconds 600 ${{ secrets.DO_CLUSTER_NAME }}
          echo "✅ Kubernetes access configured"
          echo "✅ Kubernetes cluster access configured" >> $GITHUB_STEP_SUMMARY

      - name: Restart webserver deployment
        run: |
          echo "🔄 Triggering webserver deployment rollout restart..."
          kubectl rollout restart deployment/trader-biz-staging -n $KUBE_NAMESPACE
          echo "✅ Webserver rollout restart initiated"
          echo "🔄 Webserver deployment restart initiated" >> $GITHUB_STEP_SUMMARY
          echo "Namespace: ${KUBE_NAMESPACE}" >> $GITHUB_STEP_SUMMARY

      - name: Wait 30 seconds for deployment to roll
        run: sleep 30

      - name: Verify webserver deployment
        run: |
          echo "🔍 Verifying webserver deployment rollout..."
          kubectl rollout status deployment/trader-biz-staging -n $KUBE_NAMESPACE
          if [ $? -eq 0 ]; then
            echo "✅ Webserver deployment successfully rolled out"
            echo "✅ Webserver deployment rollout completed successfully" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Webserver deployment failed to roll out"
            echo "❌ Webserver deployment rollout failed" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi

      - name: Restart worker deployment
        run: |
          echo "🔄 Triggering worker deployment rollout restart..."
          kubectl rollout restart deployment/trader-biz-staging-worker -n $KUBE_NAMESPACE
          echo "✅ Worker rollout restart initiated"
          echo "🔄 Worker deployment restart initiated" >> $GITHUB_STEP_SUMMARY

      - name: Wait 30 seconds for deployment to roll
        run: sleep 30

      - name: Verify worker deployment
        run: |
          echo "🔍 Verifying worker deployment rollout..."
          kubectl rollout status deployment/trader-biz-staging-worker -n $KUBE_NAMESPACE
          if [ $? -eq 0 ]; then
            echo "✅ Worker deployment successfully rolled out"
            echo "✅ Worker deployment rollout completed successfully" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Worker deployment failed to roll out"
            echo "❌ Worker deployment rollout failed" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi

      - name: Deployment Summary
        if: always()
        run: |
          echo "📝 Final Deployment Summary:" >> $GITHUB_STEP_SUMMARY
          echo "---" >> $GITHUB_STEP_SUMMARY
          echo "Version: ${VERSION}" >> $GITHUB_STEP_SUMMARY
          echo "Latest Image: ${DO_REGISTRY}" >> $GITHUB_STEP_SUMMARY
          echo "Dated Image: ${DO_REGISTRY_DATED}" >> $GITHUB_STEP_SUMMARY
          echo "Settings Module: ${DJANGO_SETTINGS_MODULE}" >> $GITHUB_STEP_SUMMARY
          echo "Kubernetes Namespace: ${KUBE_NAMESPACE}" >> $GITHUB_STEP_SUMMARY
          echo "Deployed by: ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
          echo "Deployed at: $(date '+%Y-%m-%d %H:%M:%S')" >> $GITHUB_STEP_SUMMARY
