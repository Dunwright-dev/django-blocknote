name: 4. Promote Canary to Production
on:
  workflow_dispatch:
    inputs:
      canary_version:
        description: 'Version to promote to production'
        required: true
        type: string

jobs:
  promote-to-production:
    runs-on: ubuntu-latest
    env:
      KUBE_NAMESPACE: tb-prod
      DEPLOYMENT_NAME_1: trader-biz-prod-1
      DEPLOYMENT_NAME_2: trader-biz-prod-2
      VERSION: ${{ inputs.canary_version }}
    steps:
      - name: Set registry paths
        run: |
          echo "🔄 Setting up registry paths..."
          timestamp=$(date +%Y%m%d-%H%M%S)
          echo "DO_CANARY_REGISTRY=registry.digitalocean.com/trader-biz/canary:latest" >> $GITHUB_ENV
          echo "DO_PROD_REGISTRY_LATEST=registry.digitalocean.com/trader-biz/production:latest" >> $GITHUB_ENV
          echo "DO_PROD_REGISTRY_DATED=registry.digitalocean.com/trader-biz/production:${timestamp}" >> $GITHUB_ENV
          echo "DO_PROD_REGISTRY_VERSION=registry.digitalocean.com/trader-biz/production:${VERSION}" >> $GITHUB_ENV

          echo "✅ Registry paths set:" >> $GITHUB_STEP_SUMMARY
          echo "  Canary Source: $DO_CANARY_REGISTRY" >> $GITHUB_STEP_SUMMARY
          echo "  Production Latest: $DO_PROD_REGISTRY_LATEST" >> $GITHUB_STEP_SUMMARY
          echo "  Production Dated: $DO_PROD_REGISTRY_DATED" >> $GITHUB_STEP_SUMMARY
          echo "  Production Version: $DO_PROD_REGISTRY_VERSION" >> $GITHUB_STEP_SUMMARY

      - name: Provide doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DO_REGISTRY_TOKEN }}

      - name: Login to Digital Ocean Registry
        run: |
          echo "🔐 Logging into Digital Ocean Registry..."
          doctl registry login --expiry-seconds 600
          echo "✅ Successfully logged into registry"
          echo "✅ Registry authentication successful" >> $GITHUB_STEP_SUMMARY

      - name: Pull canary and push to production
        run: |
          echo "⬇️ Pulling canary image..."
          docker pull $DO_CANARY_REGISTRY

          echo "🏷️ Tagging for production..."
          docker tag $DO_CANARY_REGISTRY $DO_PROD_REGISTRY_LATEST
          docker tag $DO_CANARY_REGISTRY $DO_PROD_REGISTRY_DATED
          docker tag $DO_CANARY_REGISTRY $DO_PROD_REGISTRY_VERSION

          echo "⬆️ Pushing images to production registry..."

          # Push all tags
          for tag in "$DO_PROD_REGISTRY_LATEST" "$DO_PROD_REGISTRY_DATED" "$DO_PROD_REGISTRY_VERSION"; do
            echo "Pushing $tag..."
            if push_output=$(docker push $tag 2>&1); then
              echo "$push_output"
              echo "✅ Successfully pushed $tag"

              # Extract and display the digest
              digest=$(echo "$push_output" | grep "digest: sha256:" | tail -n1 | awk '{print $3}')
              if [ ! -z "$digest" ]; then
                echo "📌 Tag digest: $digest"
                echo "Tag $tag digest: $digest" >> $GITHUB_STEP_SUMMARY
              fi
            else
              echo "❌ Failed to push $tag"
              echo "$push_output"
              exit 1
            fi
          done

      - name: Configure Kubernetes access
        run: |
          echo "🔑 Setting up Kubernetes cluster access..."
          doctl kubernetes cluster kubeconfig save --expiry-seconds 600 ${{ secrets.DO_CLUSTER_NAME }}
          echo "✅ Kubernetes access configured"
          echo "✅ Kubernetes cluster access configured" >> $GITHUB_STEP_SUMMARY

      - name: Restart first deployment
        run: |
          echo "🔄 Triggering first deployment rollout restart..."
          kubectl rollout restart deployment/$DEPLOYMENT_NAME_1 -n $KUBE_NAMESPACE
          echo "✅ First rollout restart initiated"
          echo "🔄 First deployment restart initiated" >> $GITHUB_STEP_SUMMARY
          echo "Namespace: ${KUBE_NAMESPACE}" >> $GITHUB_STEP_SUMMARY

      - name: Verify first deployment
        run: |
          echo "🔍 Verifying first deployment rollout..."
          kubectl rollout status deployment/$DEPLOYMENT_NAME_1 -n $KUBE_NAMESPACE
          if [ $? -eq 0 ]; then
            echo "✅ First deployment successfully rolled out"
            echo "✅ First deployment rollout completed successfully" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ First deployment failed to roll out"
            echo "❌ First deployment rollout failed" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi

      - name: Wait between deployments
        run: |
          echo "⏳ Waiting 60 seconds before starting second deployment..."
          sleep 60
          echo "✅ Wait period completed" >> $GITHUB_STEP_SUMMARY

      - name: Restart second deployment
        run: |
          echo "🔄 Triggering second deployment rollout restart..."
          kubectl rollout restart deployment/$DEPLOYMENT_NAME_2 -n $KUBE_NAMESPACE
          echo "✅ Second rollout restart initiated"
          echo "🔄 Second deployment restart initiated" >> $GITHUB_STEP_SUMMARY
          echo "Namespace: ${KUBE_NAMESPACE}" >> $GITHUB_STEP_SUMMARY

      - name: Verify second deployment
        run: |
          echo "🔍 Verifying second deployment rollout..."
          kubectl rollout status deployment/$DEPLOYMENT_NAME_2 -n $KUBE_NAMESPACE
          if [ $? -eq 0 ]; then
            echo "✅ Second deployment successfully rolled out"
            echo "✅ Second deployment rollout completed successfully" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Second deployment failed to roll out"
            echo "❌ Second deployment rollout failed" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi

      - name: Deployment Summary
        if: always()
        run: |
          echo "📝 Final Production Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "---" >> $GITHUB_STEP_SUMMARY
          echo "Version: ${VERSION}" >> $GITHUB_STEP_SUMMARY
          echo "Source Image: ${DO_CANARY_REGISTRY}" >> $GITHUB_STEP_SUMMARY
          echo "Production Latest: ${DO_PROD_REGISTRY_LATEST}" >> $GITHUB_STEP_SUMMARY
          echo "Production Dated: ${DO_PROD_REGISTRY_DATED}" >> $GITHUB_STEP_SUMMARY
          echo "Production Version: ${DO_PROD_REGISTRY_VERSION}" >> $GITHUB_STEP_SUMMARY
          echo "Kubernetes Namespace: ${KUBE_NAMESPACE}" >> $GITHUB_STEP_SUMMARY
          echo "Deployed by: ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
          echo "Deployed at: $(date '+%Y-%m-%d %H:%M:%S')" >> $GITHUB_STEP_SUMMARY

      - name: Run garbage collection
        if: success()
        run: |
          echo "🧹 Running garbage collection on the registry..."
          if doctl registry garbage-collection start --force; then
            echo "✅ Garbage collection started successfully"
            echo "✅ Registry garbage collection initiated" >> $GITHUB_STEP_SUMMARY

            # Wait for garbage collection to complete
            status="running"
            while [ "$status" = "running" ]; do
              echo "⏳ Waiting for garbage collection to complete..."
              status=$(doctl registry garbage-collection get-active | grep -i "status:" | awk '{print $2}' | tr '[:upper:]' '[:lower:]')
              if [ "$status" = "failed" ]; then
                echo "❌ Garbage collection failed"
                echo "❌ Registry garbage collection failed" >> $GITHUB_STEP_SUMMARY
                exit 1
              fi
              sleep 30
            done

            echo "✅ Garbage collection completed successfully"
            echo "✅ Registry garbage collection completed" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Failed to start garbage collection"
            echo "❌ Failed to start registry garbage collection" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi
