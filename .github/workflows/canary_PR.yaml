name: 3. Build and Deploy Canary
on:
  workflow_dispatch:

jobs:
  build-deploy-canary:
    runs-on: ubuntu-latest
    env:
      KUBE_NAMESPACE: tb-prod
      DEPLOYMENT_NAME: trader-biz-prod-canary
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get latest staging branch
        id: get_staging_branch
        run: |
          echo "🔍 Finding latest staging branch..."
          # Get all staging branches sorted by creation date (newest first)
          latest_staging=$(git for-each-ref --sort=-creatordate --format '%(refname:short)' refs/remotes/origin | grep '^origin/staging-' | sed 's|origin/||' | head -n 1)
          
          if [ -z "$latest_staging" ]; then
            echo "❌ No staging branches found!"
            exit 1
          fi
          
          echo "📌 Latest staging branch: ${latest_staging}"
          # Extract version from branch name (removes 'staging-' prefix)
          version=${latest_staging#staging-}
          echo "📌 Version: ${version}"
          
          # Set environment variables
          echo "STAGING_BRANCH=${latest_staging}" >> $GITHUB_ENV
          echo "VERSION=${version}" >> $GITHUB_ENV
          
          echo "✅ Successfully identified latest staging branch"
          
          # Add to job summary
          echo "Latest staging branch: ${latest_staging}" >> $GITHUB_STEP_SUMMARY
          echo "Version: ${version}" >> $GITHUB_STEP_SUMMARY

      - name: Checkout latest staging
        run: |
          echo "🔄 Checking out latest staging branch: ${{ env.STAGING_BRANCH }}"
          git checkout ${{ env.STAGING_BRANCH }}
          echo "✅ Successfully checked out staging branch"

      - name: Set registry paths
        run: |
          echo "🔄 Setting up registry paths..."
          timestamp=$(date +%Y%m%d-%H%M%S)
          echo "DO_REGISTRY_LATEST=registry.digitalocean.com/trader-biz/canary:latest" >> $GITHUB_ENV
          echo "DO_REGISTRY_DATED=registry.digitalocean.com/trader-biz/canary:${timestamp}" >> $GITHUB_ENV
          echo "DO_REGISTRY_VERSION=registry.digitalocean.com/trader-biz/canary:${{ env.VERSION }}" >> $GITHUB_ENV
          
          echo "✅ Registry paths set:"
          echo "  Latest: $DO_REGISTRY_LATEST" >> $GITHUB_STEP_SUMMARY
          echo "  Dated: $DO_REGISTRY_DATED" >> $GITHUB_STEP_SUMMARY
          echo "  Version: $DO_REGISTRY_VERSION" >> $GITHUB_STEP_SUMMARY

      - name: Build image
        env:
          DJANGO_SETTINGS_MODULE: config.settings.production
        run: |
          echo "🏗️ Building Docker image with version ${{ env.VERSION }}..."
          docker build -t $DO_REGISTRY_LATEST \
                      -t $DO_REGISTRY_DATED \
                      -t $DO_REGISTRY_VERSION \
                      --build-arg SETTINGS_MODULE=$DJANGO_SETTINGS_MODULE .
          
          echo "✅ Docker image built successfully with all tags"
          echo "✅ Build completed successfully" >> $GITHUB_STEP_SUMMARY
          echo "Settings Module: $DJANGO_SETTINGS_MODULE" >> $GITHUB_STEP_SUMMARY

      - name: Provide doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DO_REGISTRY_TOKEN }}

      - name: Login to Digital Ocean Registry
        run: |
          echo "🔐 Logging into Digital Ocean Registry..."
          doctl registry login --expiry-seconds 600
          echo "✅ Successfully logged into registry"
          echo "✅ Registry authentication successful" >> $GITHUB_STEP_SUMMARY

      - name: Push to Digital Ocean Registry
        run: |
          echo "⬆️ Pushing images to canary registry..."

          # Push all tags
          for tag in "$DO_REGISTRY_LATEST" "$DO_REGISTRY_DATED" "$DO_REGISTRY_VERSION"; do
            echo "Pushing $tag..."
            if push_output=$(docker push $tag 2>&1); then
              echo "$push_output"
              echo "✅ Successfully pushed $tag"

              # Extract and display the digest
              digest=$(echo "$push_output" | grep "digest: sha256:" | tail -n1 | awk '{print $3}')
              if [ ! -z "$digest" ]; then
                echo "📌 Tag digest: $digest"
                echo "Tag $tag digest: $digest" >> $GITHUB_STEP_SUMMARY
              fi
            else
              echo "❌ Failed to push $tag"
              echo "$push_output"
              exit 1
            fi
          done

      - name: Configure Kubernetes access
        run: |
          echo "🔑 Setting up Kubernetes cluster access..."
          doctl kubernetes cluster kubeconfig save --expiry-seconds 600 ${{ secrets.DO_CLUSTER_NAME }}
          echo "✅ Kubernetes access configured"
          echo "✅ Kubernetes cluster access configured" >> $GITHUB_STEP_SUMMARY

      - name: Restart deployment
        run: |
          echo "🔄 Triggering deployment rollout restart..."
          kubectl rollout restart deployment/$DEPLOYMENT_NAME -n $KUBE_NAMESPACE
          echo "✅ Rollout restart initiated"
          echo "🔄 Deployment restart initiated" >> $GITHUB_STEP_SUMMARY
          echo "Namespace: ${KUBE_NAMESPACE}" >> $GITHUB_STEP_SUMMARY

      - name: Verify deployment
        run: |
          echo "🔍 Verifying deployment rollout..."
          kubectl rollout status deployment/$DEPLOYMENT_NAME -n $KUBE_NAMESPACE
          if [ $? -eq 0 ]; then
            echo "✅ Deployment successfully rolled out"
            echo "✅ Deployment rollout completed successfully" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Deployment failed to roll out"
            echo "❌ Deployment rollout failed" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi

      - name: Deployment Summary
        if: always()
        run: |
          echo "📝 Final Canary Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "---" >> $GITHUB_STEP_SUMMARY
          echo "Version: ${VERSION}" >> $GITHUB_STEP_SUMMARY
          echo "Latest Image: ${DO_REGISTRY_LATEST}" >> $GITHUB_STEP_SUMMARY
          echo "Dated Image: ${DO_REGISTRY_DATED}" >> $GITHUB_STEP_SUMMARY
          echo "Version Image: ${DO_REGISTRY_VERSION}" >> $GITHUB_STEP_SUMMARY
          echo "Kubernetes Namespace: ${KUBE_NAMESPACE}" >> $GITHUB_STEP_SUMMARY
          echo "Deployed by: ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
          echo "Deployed at: $(date '+%Y-%m-%d %H:%M:%S')" >> $GITHUB_STEP_SUMMARY
